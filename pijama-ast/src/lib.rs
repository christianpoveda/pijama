//! Pijama's Abstract Syntax Tree.
//!
//! This representation is generated by the `pijama-parser` module. No processing is done to this
//! representation which means that:
//!
//! - All the terms have a `span` field to track their location in the source code.
//! - Identifiers are ambiguous. This includes identifiers for types, local values, functions and
//! so on.
//! - Type annotations are optional, that's why every `Ty` term is wrapped in an `Option`.

mod atom;
mod expr;
mod func;
mod ident;
mod literal;
mod op;
mod program;
mod ty;

pub use atom::Atom;
pub use expr::{Expr, ExprKind};
pub use func::FuncDef;
pub use ident::Ident;
pub use literal::{Literal, LiteralKind};
pub use op::{BinOp, BinOpKind, UnOp, UnOpKind};
pub use program::Program;
pub use ty::{Ty, TyKind};
