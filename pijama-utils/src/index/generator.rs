use crate::index::Index;

use std::{cell::Cell, marker::PhantomData};

/// A generator of indices.
///
/// This is useful if you need to generate a set of indices that need to be unique. This type uses
/// interior mutability and it is not thread-safe.
///
/// If you use more than one [IndexGen] uniqueness is only guaranteed for indices that come from
/// the same generator.
pub struct IndexGen<I: Index> {
    count: Cell<usize>,
    marker: PhantomData<I>,
}

impl<I: Index> IndexGen<I> {
    /// Create a new generator.
    pub fn new() -> Self {
        Self {
            count: Cell::new(0),
            marker: PhantomData,
        }
    }

    /// Create a new index guaranteed to be different from any other index generated by this
    /// generator.
    pub fn generate(&self) -> I {
        let count = self.count.get();
        self.count.set(count + 1);
        I::new(count)
    }

    pub fn count(&self) -> usize {
        self.count.get()
    }
}
